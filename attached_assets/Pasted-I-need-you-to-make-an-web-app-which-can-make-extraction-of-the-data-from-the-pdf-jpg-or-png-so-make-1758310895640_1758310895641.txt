I need you to make an web app which can make extraction of the data from the pdf ,jpg or png so make the web app I need the all the funcnaljties mentioned in the codes and need to include the facilities I can use any api key gemini or open ai or any other I want refer above also co it is already built so refer that also and continue from there only do not waste time on doing everything refer the files with the image it is working perfectly but fro document it is not extracting data perfelctly rfer above given files and add this code also from future import annotations from typing import Optional from pydantic import BaseModel, Field from agentic_doc.parse import parse class MedicalReportSchema(BaseModel): Patient_Name: Optional[str] = Field( None, alias='Patient Name', description='Patient Name' ) Age: Optional[float] = Field(None, description='Age') Sex: Optional[str] = Field(None, description='Patient Gender') Address: Optional[str] = Field(None, description='Address') Diagnosis: Optional[str] = Field(None, description='Diagnosis') Parse a file and extract the fields results = parse("mydoc.pdf", extraction_model=MedicalReportSchema) fields = results[0].extraction Return the value of the extracted fields print(fields) import json import requests VA_API_KEY = "YOUR_VA_API_KEY" # Replace with your API key headers = {"Authorization": f"Basic {VA_API_KEY}"} url = "https://api.va.landing.ai/v1/tools/agentic-document-analysis" base_pdf_path = "your_pdf_path" # Replace with the path to the file pdf_name = "filename.pdf" # Replace the file pdf_path = f"{base_pdf_path}/{pdf_name}" Define your schema schema = { "title": "Medical Report Schema", "description": "Schema for medical report extraction", "type": "object", "properties": { "Patient Name": { "type": "string", "description": "Patient Name" }, "Age": { "type": "number", "description": "Age" }, "Sex": { "type": "string", "description": "Patient Gender" }, "Address": { "type": "string", "description": "Address" }, "Diagnosis": { "type": "string", "description": "Diagnosis" } } } files = [ ("pdf", (pdf_name, open(pdf_path, "rb"), "application/pdf")), ] payload = {"fields_schema": json.dumps(schema)} response = requests.request("POST", url, headers=headers, files=files, data=payload) output_data = response.json()["data"] extracted_info = output_data["extracted_schema"] print(extracted_info) divide the doc data into Data Type String Enum Date Boolean Number Integer Object Array array furether divided into String Enum Date Boolean Number Integer Object this is for the schema and make the preview like tand give the source also from which text extracted from which part of the doc