Pasted-README-Apache-2-0-license-Agentic-Document-Extraction-Python-Library-Unit-test-status-Integrati-1758465814752_1758465814752.txtREADME Apache-2.0 license Agentic Document Extraction – Python Library Unit test status Integration test status PyPI version Web App · Discord · Blog · Docs Overview The LandingAI Agentic Document Extraction API pulls structured data out of visually complex documents—think tables, pictures, and charts—and returns a hierarchical JSON with exact element locations. This Python library wraps that API to provide: Long document support – process 100+ page PDFs in a single call Auto retry / paging – handles concurrency, time outs, and rate limits Helper utilities – bounding box snippets, visual debuggers, and more Features 📦 Batteries included install: pip install agentic-doc – nothing else needed → see Installation 🗂️ All file types: parse PDFs of any length, single images, or URLs → see Supported Files 📚 Long doc ready: auto split & parallel process 1000+ page PDFs, then stitch results → see Parse Large PDF Files 🧩 Structured output: returns hierarchical JSON plus ready to render Markdown → see Result Schema 👁️ Ground truth visuals: optional bounding box snippets and full page visualizations → see Save Groundings as Images 🏃 Batch & parallel: feed a list; library manages threads & rate limits (BATCH_SIZE, MAX_WORKERS) → see Parse Multiple Files in a Batch 🔄 Resilient: exponential backoff retries for 408/429/502/503/504 and rate limit hits → see Automatically Handle API Errors and Rate Limits with Retries ⚙️ Config via env / .env: tweak parallelism, logging style, retry caps—no code changes → see Configuration Options 🌐 Raw API ready: advanced users can still hit the REST endpoint directly → see the API Docs Quick Start Installation pip install agentic-doc Requirements Python version 3.9, 3.10, 3.11 or 3.12 LandingAI agentic AI API key (get the key here) Set the API Key as an Environment Variable After you get the LandingAI agentic AI API key, set the key as an environment variable (or put it in a .env file): export VISION_AGENT_API_KEY=<your-api-key> Supported Files The library can extract data from: PDFs (any length) Images that are supported by OpenCV-Python (i.e. the cv2 library) URLs pointing to PDF or image files Basic Usage Extract Data from One Document Run the following script to extract data from one document and return the results in both markdown and structured chunks. from agentic_doc.parse import parse # Parse a local file result = parse("path/to/image.png") print(result[0].markdown) # Get the extracted data as markdown print(result[0].chunks) # Get the extracted data as structured chunks of content # Parse a document from a URL result = parse("https://example.com/document.pdf") print(result[0].markdown) #### Extract Data from Multiple Documents Run the following script to extract data from multiple documents. ```python from agentic_doc.parse import parse # Parse multiple local files file_paths = ["path/to/your/document1.pdf", "path/to/another/document2.pdf"] results = parse(file_paths) for result in results: print(result.markdown) # Parse and save results to a directory results = parse(file_paths, result_save_dir="path/to/save/results") result_paths = [] for result in results: result_paths.append(result.result_path) # result_paths: ["path/to/save/results/document1_20250313_070305.json", ...] Using field extraction from pydantic import BaseModel, Field from agentic_doc.parse import parse class ExtractedFields(BaseModel): employee_name: str = Field(description="the full name of the employee") employee_ssn: str = Field(description="the social security number of the employee") gross_pay: float = Field(description="the gross pay of the employee") employee_address: str = Field(description="the address of the employee") results = parse("mydoc.pdf", extraction_model=ExtractedFields) fields = results[0].extraction metadata = results[0].extraction_metadata print(f"Field value: {fields.employee_name}, confidence: {metadata.employee_name.confidence}") Extract Data Using Connectors The library now supports various connectors to easily access documents from different sources: Google Drive Connector Prerequisites: Follow the Google Drive API Python Quickstart tutorial first to set up your credentials. The Google Drive API quickstart will guide you through: Creating a Google Cloud project Enabling the Google Drive API Setting up OAuth 2.0 credentials After completing the quickstart tutorial, you can use the Google Drive connector as follows: from agentic_doc.parse import parse from agentic_doc.connectors import GoogleDriveConnectorConfig # Using OAuth credentials file (from quickstart tutorial) config = GoogleDriveConnectorConfig( client_secret_file="path/to/credentials.json", folder_id="your-google-drive-folder-id" # Optional ) # Parse all documents in the folder results = parse(config) # Parse with filtering results = parse(config, con...